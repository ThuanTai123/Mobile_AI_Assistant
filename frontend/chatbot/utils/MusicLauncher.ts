// utils/MusicLauncher.ts
import * as Linking from 'expo-linking';

const politeSuffixes = [
  "d√πm t√¥i", "gi√πm t√¥i", "gi√∫p m√¨nh", "gi√∫p t√¥i", "nh√©", "v·ªõi", "nha", "ƒëi", "gi√πm", "d√πm", "th√¥i", "m√†", "h·ªô m√¨nh"
];

// T√°ch v√† l√†m s·∫°ch t√™n b√†i h√°t
const extractCleanKeyword = (text: string): string | null => {
  const match = text.toLowerCase().match(/(?:m·ªü|ph√°t|b·∫≠t|nghe)\s+(?:b√†i h√°t|nh·∫°c)?\s*(.+?)\s*(?:tr√™n youtube|b·∫±ng youtube|youtube)?$/);
  if (!match || !match[1]) return null;

  let keyword = match[1].trim();

  // Lo·∫°i b·ªè h·∫≠u t·ªë l·ªãch s·ª±
  for (const suffix of politeSuffixes) {
    if (keyword.endsWith(suffix)) {
      keyword = keyword.slice(0, -suffix.length).trim();
      break;
    }
  }

  return keyword.length >= 2 ? keyword : "nh·∫°c th∆∞ gi√£n";
};

export const handleOpenMusic = async (msg: string): Promise<string | null> => {
  const normalized = msg.toLowerCase();

  // Ki·ªÉm tra c√≥ li√™n quan ƒë·∫øn nh·∫°c kh√¥ng
  if (
    normalized.includes("m·ªü nh·∫°c") ||
    normalized.includes("ph√°t nh·∫°c") ||
    normalized.includes("b·∫≠t nh·∫°c") ||
    normalized.includes("b√†i h√°t") ||
    normalized.includes("nghe nh·∫°c") ||
    normalized.includes("youtube")
  ) {
    const keyword = extractCleanKeyword(msg);
    if (!keyword) return null;

    const searchUrl = `https://www.youtube.com/results?search_query=${encodeURIComponent(keyword)}`;
    await Linking.openURL(searchUrl);
    return `üéµ ƒê√£ m·ªü YouTube v·ªõi t·ª´ kho√° "${keyword}" cho b·∫°n.`;
  }

  return null;
};
