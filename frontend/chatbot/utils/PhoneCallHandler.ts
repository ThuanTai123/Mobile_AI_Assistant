import { Alert, Linking } from "react-native"
import * as Contacts from "expo-contacts"
import DeviceInfo from 'react-native-device-info'

interface Contact {
  id: string
  name: string
  phoneNumbers: Array<{
    number: string
    label?: string
  }>
}

class PhoneCallHandler {
  private contacts: Contact[] = []

  /**
   * Kh·ªüi t·∫°o v√† load danh b·∫°
   */
  async initialize(): Promise<void> {
    try {
      const { status } = await Contacts.requestPermissionsAsync()
      if (status === "granted") {
        await this.loadContacts()
        console.log("üìû Phone call handler initialized")
      } else {
        console.log("‚ùå Contacts permission denied")
      }
    } catch (error) {
      console.error("‚ùå Error initializing phone handler:", error)
    }
  }

  /**
   * Load danh b·∫° t·ª´ thi·∫øt b·ªã
   */
  private async loadContacts(): Promise<void> {
    try {
      const { data } = await Contacts.getContactsAsync({
        fields: [Contacts.Fields.Name, Contacts.Fields.PhoneNumbers],
      })

      this.contacts = data
        .filter(
          (contact): contact is Contacts.Contact =>
            !!contact.id &&
            !!contact.name &&
            Array.isArray(contact.phoneNumbers) &&
            contact.phoneNumbers.length > 0
        )
        .map((contact) => ({
          id: contact.id!,
          name: contact.name!,
          phoneNumbers: contact.phoneNumbers!
            .filter((p) => !!p.number)
            .map((p) => ({
              number: p.number!,
              label: p.label,
            })),
        }))

      console.log(`üì± Loaded ${this.contacts.length} contacts`)
    } catch (error) {
      console.error("‚ùå Error loading contacts:", error)
    }
  }

  /**
   * X·ª≠ l√Ω l·ªánh g·ªçi ƒëi·ªán t·ª´ text/voice
   */
  async handleCallCommand(message: string): Promise<string | null> {
    const lowerMessage = message.toLowerCase()

    // Ki·ªÉm tra c√°c pattern g·ªçi ƒëi·ªán
    const callPatterns = [
      /g·ªçi cho (.+)/i,
      /g·ªçi (.+)/i,
      /call (.+)/i,
      /phone (.+)/i,
      /ƒëi·ªán tho·∫°i (.+)/i,
      /li√™n h·ªá (.+)/i,
    ]

    let targetName = ""
    let phoneNumber = ""

    for (const pattern of callPatterns) {
      const match = message.match(pattern)
      if (match) {
        targetName = match[1].trim()
        break
      }
    }

    const phonePattern = /(\+?[\d\s\-]{8,15})/
    const phoneMatch = message.match(phonePattern)
    if (phoneMatch) {
      phoneNumber = phoneMatch[1].replace(/[\s\-]/g, "")
      return await this.makeCall(phoneNumber, "S·ªë ƒëi·ªán tho·∫°i")
    }

    if (targetName) {
      const contact = this.findContact(targetName)
      if (contact) {
        const primaryPhone = contact.phoneNumbers[0].number
        return await this.makeCall(primaryPhone, contact.name)
      } else {
        return `‚ùå Kh√¥ng t√¨m th·∫•y li√™n h·ªá "${targetName}" trong danh b·∫°.`
      }
    }

    return null
  }

  /**
   * T√¨m contact trong danh b·∫°
   */
  private findContact(searchName: string): Contact | null {
    const searchLower = searchName.toLowerCase()

    let found = this.contacts.find((contact) => contact.name.toLowerCase() === searchLower)

    if (!found) {
      found = this.contacts.find((contact) => contact.name.toLowerCase().includes(searchLower))
    }

    if (!found) {
      found = this.contacts.find((contact) => {
        const nameParts = contact.name.toLowerCase().split(" ")
        return nameParts.some((part) => part.includes(searchLower))
      })
    }

    return found || null
  }

  /**
   * Th·ª±c hi·ªán cu·ªôc g·ªçi
   */
  private async makeCall(phoneNumber: string, contactName: string): Promise<string> {
    try {
      const cleanNumber = phoneNumber.replace(/[\s\-]/g, "")

      if (!this.isValidPhoneNumber(cleanNumber)) {
        return `‚ùå S·ªë ƒëi·ªán tho·∫°i "${phoneNumber}" kh√¥ng h·ª£p l·ªá.`
      }

      const phoneUrl = `tel:${cleanNumber}`
      const canCall = await Linking.canOpenURL(phoneUrl)

      if (!canCall) {
        return "‚ùå Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ t√≠nh nƒÉng g·ªçi ƒëi·ªán."
      }

      return new Promise((resolve) => {
        Alert.alert("X√°c nh·∫≠n g·ªçi ƒëi·ªán", `B·∫°n c√≥ mu·ªën g·ªçi cho ${contactName}?\nS·ªë: ${phoneNumber}`, [
          { text: "H·ªßy", style: "cancel", onPress: () => resolve("‚ùå ƒê√£ h·ªßy cu·ªôc g·ªçi.") },
          {
            text: "G·ªçi",
            onPress: async () => {
              try {
                await Linking.openURL(phoneUrl)
                resolve(`üìû ƒêang g·ªçi cho ${contactName} (${phoneNumber})...`)
              } catch (error) {
                resolve(`‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán cu·ªôc g·ªçi: ${error}`)
              }
            },
          },
        ])
      })
    } catch (error) {
      console.error("‚ùå Error making call:", error)
      return `‚ùå L·ªói khi th·ª±c hi·ªán cu·ªôc g·ªçi: ${error}`
    }
  }

  private isValidPhoneNumber(phoneNumber: string): boolean {
    const cleaned = phoneNumber.replace(/[\s\-+]/g, "")
    if (!/^\d+$/.test(cleaned)) return false
    return cleaned.length >= 7 && cleaned.length <= 15
  }

  /**
   * L·∫•y danh s√°ch contacts ƒë·ªÉ hi·ªÉn th·ªã
   */
  getContacts(): Contact[] {
    return this.contacts
  }

  /**
   * T√¨m ki·∫øm contacts
   */
  searchContacts(query: string): Contact[] {
    const searchLower = query.toLowerCase()
    return this.contacts.filter((contact) => contact.name.toLowerCase().includes(searchLower))
  }

  /**
   * X·ª≠ l√Ω l·ªánh kh·∫©n c·∫•p
   */
  async handleEmergencyCall(message: string): Promise<string | null> {
    const emergencyPatterns = [/c·∫•p c·ª©u|emergency|911/i, /c·∫£nh s√°t|police|113/i, /c·ª©u h·ªèa|fire|114/i, /kh·∫©n c·∫•p/i]

    for (const pattern of emergencyPatterns) {
      if (pattern.test(message)) {
        let number = "115"
        let label = "c·∫•p c·ª©u"

        if (/c·∫£nh s√°t|police|113/i.test(message)) {
          number = "113"
          label = "c·∫£nh s√°t"
        } else if (/c·ª©u h·ªèa|fire|114/i.test(message)) {
          number = "114"
          label = "c·ª©u h·ªèa"
        }

        return new Promise((resolve) => {
          Alert.alert("‚ö†Ô∏è Cu·ªôc g·ªçi kh·∫©n c·∫•p", `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ªçi ${label} (${number})?`, [
            { text: "H·ªßy", style: "cancel", onPress: () => resolve("‚ùå ƒê√£ h·ªßy cu·ªôc g·ªçi kh·∫©n c·∫•p.") },
            {
              text: "G·ªçi ngay",
              style: "destructive",
              onPress: async () => {
                try {
                  await Linking.openURL(`tel:${number}`)
                  resolve(`üö® ƒêang g·ªçi ${label} (${number})...`)
                } catch (error) {
                  resolve(`‚ùå Kh√¥ng th·ªÉ g·ªçi kh·∫©n c·∫•p: ${error}`)
                }
              },
            },
          ])
        })
      }
    }

    return null
  }

  formatPhoneNumber(phoneNumber: string): string {
    const cleaned = phoneNumber.replace(/\D/g, "")
    if (cleaned.startsWith("84")) {
      return `+84 ${cleaned.slice(2, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`
    }
    if (cleaned.length === 10) {
      return `${cleaned.slice(0, 4)} ${cleaned.slice(4, 7)} ${cleaned.slice(7)}`
    }
    return phoneNumber
  }
}

// Singleton export
const phoneCallHandler = new PhoneCallHandler()
export { phoneCallHandler }
// Exports ti·ªán √≠ch
export const handlePhoneCall = (msg: string) => phoneCallHandler.handleCallCommand(msg)
export const handleEmergencyCall = (msg: string) => phoneCallHandler.handleEmergencyCall(msg)
export const initializePhoneHandler = async () => {
  await phoneCallHandler.initialize()
}
export const getContacts = () => phoneCallHandler.getContacts()
export const searchContacts = (q: string) => phoneCallHandler.searchContacts(q)
console.log("DEBUG: phoneCallHandler =", phoneCallHandler)
