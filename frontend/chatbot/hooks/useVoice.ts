import { useState, useEffect, useRef } from 'react';
import { Alert } from 'react-native';
import Voice, {
  SpeechRecognizedEvent,
  SpeechResultsEvent,
  SpeechErrorEvent,
  SpeechStartEvent,
  SpeechEndEvent
} from '@react-native-voice/voice';

interface VoiceError {
  code?: string;
  message?: string;
}

interface UseVoiceReturn {
  isListening: boolean;
  results: string[];
  partialTranscript: string;
  error: string | null;
  startListening: () => Promise<void>;
  stopListening: () => Promise<void>;
  cancelListening: () => Promise<void>;
  destroyRecognizer: () => Promise<void>;
}

const getErrorMessage = (errorCode: string): string => {
  const errorMessages: { [key: string]: string } = {
    '1': 'L·ªói m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.',
    '2': 'L·ªói √¢m thanh. Vui l√≤ng ki·ªÉm tra microphone.',
    '3': 'L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.',
    '4': 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p microphone.',
    '5': 'D·ªãch v·ª• nh·∫≠n d·∫°ng gi·ªçng n√≥i kh√¥ng kh·∫£ d·ª•ng.',
    '6': 'Kh√¥ng ƒë·ªß b·ªô nh·ªõ.',
    '7': 'Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c gi·ªçng n√≥i. Vui l√≤ng n√≥i r√µ h∆°n.',
    '8': 'D·ªãch v·ª• b·∫≠n. Vui l√≤ng th·ª≠ l·∫°i.',
    '9': 'D·ªØ li·ªáu kh√¥ng ƒë·ªß ƒë·ªÉ nh·∫≠n d·∫°ng.',
  };
  return errorMessages[errorCode] || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.';
};

const useVoice = (): UseVoiceReturn => {
  const [isListening, setIsListening] = useState(false);
  const [results, setResults] = useState<string[]>([]);
  const [partialTranscript, setPartialTranscript] = useState('');
  const [error, setError] = useState<string | null>(null);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    Voice.onSpeechStart = onSpeechStart;
    Voice.onSpeechRecognized = onSpeechRecognized;
    Voice.onSpeechEnd = onSpeechEnd;
    Voice.onSpeechError = onSpeechError;
    Voice.onSpeechResults = onSpeechResults;
    Voice.onSpeechPartialResults = onSpeechPartialResults;
    Voice.onSpeechVolumeChanged = onSpeechVolumeChanged;

    return () => {
      Voice.destroy().then(Voice.removeAllListeners);
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
    };
  }, []);

  const onSpeechStart = (e: SpeechStartEvent) => {
    console.log('üé§ Speech recognition started', e);
    setIsListening(true);
    setError(null);
  };

  const onSpeechRecognized = (e: SpeechRecognizedEvent) => {
    console.log('üéØ Speech recognized', e);
  };

  const onSpeechEnd = (e: SpeechEndEvent) => {
    console.log('üõë Speech recognition ended', e);
    setIsListening(false);
    setPartialTranscript('');
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const onSpeechError = (e: SpeechErrorEvent) => {
    console.error('‚ùå Speech recognition error', e);
    const errorCode = e.error?.code?.toString() || '';
    const errorMessage = e.error?.message || 'L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i';
    setError(errorMessage);
    setIsListening(false);
    setPartialTranscript('');
    if (errorCode !== '7') {
      Alert.alert('L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i', getErrorMessage(errorCode), [{ text: 'OK' }]);
    }
  };

  const onSpeechResults = (e: SpeechResultsEvent) => {
    console.log('üìù Speech results', e);
    if (e.value?.length) {
      setResults(e.value);
      setPartialTranscript('');
    }
  };

  const onSpeechPartialResults = (e: SpeechResultsEvent) => {
    if (e.value?.length) {
      setPartialTranscript(e.value[0]);
    }
  };

  const onSpeechVolumeChanged = (e: any) => {
    // C√≥ th·ªÉ hi·ªÉn th·ªã UI volume n·∫øu c·∫ßn
  };

  const startListening = async () => {
    if (isListening) {
      console.warn('üîÅ ƒêang l·∫Øng nghe. Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.');
      return;
    }

    try {
      setError(null);
      setResults([]);
      setPartialTranscript('');

      const available = await Voice.isAvailable();
      if (!available) {
        throw new Error('Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i');
      }

      console.log('üöÄ B·∫Øt ƒë·∫ßu nh·∫≠n d·∫°ng...');
      await Voice.start('vi-VN');

      timeoutRef.current = setTimeout(async () => {
        if (isListening) {
          console.log('‚è∞ T·ª± ƒë·ªông d·ª´ng sau 10 gi√¢y');
          await stopListening();
        }
      }, 10000);

    } catch (err) {
      console.error('‚ùå Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu:', err);
      const errorMessage = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi b·∫Øt ƒë·∫ßu';
      setError(errorMessage);
      Alert.alert('L·ªói', errorMessage, [{ text: 'OK' }]);
    }
  };

  const stopListening = async () => {
    try {
      console.log('üõë D·ª´ng nh·∫≠n d·∫°ng');
      await Voice.stop();
    } catch (err) {
      console.error('‚ùå L·ªói khi d·ª´ng:', err);
    } finally {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    }
  };

  const cancelListening = async () => {
    try {
      console.log('‚ùå Hu·ª∑ nh·∫≠n d·∫°ng');
      await Voice.cancel();
      setIsListening(false);
      setPartialTranscript('');
      setResults([]);
    } catch (err) {
      console.error('‚ùå L·ªói khi hu·ª∑:', err);
    } finally {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    }
  };

  const destroyRecognizer = async () => {
    try {
      console.log('üóëÔ∏è Hu·ª∑ b·ªô nh·∫≠n d·∫°ng');
      await Voice.destroy();
    } catch (err) {
      console.error('‚ùå L·ªói khi xo√°:', err);
    } finally {
      setIsListening(false);
      setPartialTranscript('');
      setResults([]);
      setError(null);
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    }
  };

  return {
    isListening,
    results,
    partialTranscript,
    error,
    startListening,
    stopListening,
    cancelListening,
    destroyRecognizer,
  };
};

export default useVoice;
