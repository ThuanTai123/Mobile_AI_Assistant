import axios from "axios"
import { getCurrentCity } from "../screens/location"
import { handleDeviceCommand } from "../utils/DeviceCommandHandler"

const API_URL = "https://mobile-ai-assistant.onrender.com"
// const API_URL = "http://192.168.1.88:5000"
export interface BotResponse {
  [x: string]: any
  reply: string
  type?: string
  note_data?: {
    id: number
    title: string
    content: string
    created_at: string
  }
  audio_url?: string
}

export const wakeUpServer = async () => {
  try {
    await axios.post('http://<YOUR_FLASK_SERVER>/chat', {
      message: 'wake_up_ping',
    });
    console.log('‚úÖ Server is waking up...');
  } catch (error:unknown) {
    const err = error as Error
    console.log('‚ö†Ô∏è Failed to wake up server:', err.message);
  }
};

export const processMessage = async (message: string): Promise<BotResponse> => {
  console.log("üåê API Call starting for message:", message);
  
  const deviceReply = await handleDeviceCommand(message)
  if (deviceReply) return { reply: deviceReply }

  const weatherKeywords = ["th·ªùi ti·∫øt", "tr·ªùi", "m∆∞a", "n·∫Øng", "nhi·ªát ƒë·ªô", "c√≥ m∆∞a", "c√≥ n·∫Øng", "tr·ªùi m∆∞a", "tr·ªùi n·∫Øng"];
  const isWeatherQuery = weatherKeywords.some(kw => message.toLowerCase().includes(kw));
  const isNote = /ghi ch√∫/.test(message.toLowerCase())
  const isTask = /nh·∫Øc vi·ªác|nh·∫Øc t√¥i/.test(message.toLowerCase())
  const isAppointment = /l·ªãch h·∫πn|h·∫πn g·∫∑p|ƒë·∫∑t l·ªãch/.test(message.toLowerCase())

  try {
    let endpoint = '';
    let payload = {};

    if (isWeatherQuery) {    
      endpoint = '/weather';
      const city = await getCurrentCity()
      payload = { message, city };
      console.log("Calling weather with city:", city)
    } else if (isNote) {
      endpoint = '/note';
      payload = { content: message };
    } else if (isTask) {
      endpoint = '/task';
      payload = { task: message };
    } else if (isAppointment) {
      endpoint = '/appointment';
      payload = { text: message };
    } else {
      endpoint = '/chat';
      payload = { message };
    }

    console.log(`üåê Calling: ${API_URL}${endpoint}`);

    const res = await axios.post<BotResponse>(`${API_URL}${endpoint}`, payload, {
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json',
      }
    });

    console.log("‚úÖ API Response received:", res.status, res.data);

    // ‚úÖ NEW: Handle server errors that still return a response
    if (res.data.error) {
      console.warn("‚ö†Ô∏è Server returned error but with response:", res.data.error);
      
      // If server provides a reply despite the error, use it
      if (res.data.reply) {
        return { reply: res.data.reply };
      }
      
      // Otherwise provide a fallback
      return { reply: "Xin l·ªói, t√¥i g·∫∑p m·ªôt ch√∫t s·ª± c·ªë. H√£y th·ª≠ l·∫°i nh√©!" };
    }

    // Handle note creation response
    if (isNote) {
      if (res.data.reply) {
        return res.data;
      } else if ((res.data as any).content || (res.data as any).id) {
        return {
          reply: `ƒê√£ t·∫°o ghi ch√∫ th√†nh c√¥ng!`,
          type: "note_created",
        };
      } else {
        return {
          reply: "ƒê√£ x·ª≠ l√Ω y√™u c·∫ßu t·∫°o ghi ch√∫.",
          type: "note_created",
        };
      }
    }

    return res.data;

  } catch (error: any) {
    console.error("‚ùå API Error Details:");
    console.error("- Error message:", error.message);
    
    if (error.response) {
      console.error("- Response status:", error.response.status);
      console.error("- Response data:", error.response.data);
      
      // ‚úÖ NEW: Handle TTS rate limit specifically
      if (error.response.status === 500 && 
          error.response.data?.error?.includes("429") && 
          error.response.data?.error?.includes("TTS")) {
        
        console.warn("üé§ TTS API rate limited, but continuing with text response");
        
        // If server provides a reply despite TTS failure, use it
        if (error.response.data?.reply) {
          return { reply: error.response.data.reply };
        }
        
        // Provide a generic response for the user's message
        return { 
          reply: getGenericResponse(message)
        };
      }
      
      // Handle other server errors
      if (error.response.status === 500) {
        return { 
          reply: "M√°y ch·ªß ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t." 
        };
      }
    } else if (error.request) {
      return { 
        reply: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng." 
      };
    }

    return { 
      reply: "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i sau." 
    };
  }
}

// ‚úÖ NEW: Helper function for generic responses
const getGenericResponse = (message: string): string => {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes("xin ch√†o") || lowerMessage.includes("hello")) {
    return "Xin ch√†o! T√¥i l√† Ruby Assistant. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?";
  }
  
  if (lowerMessage.includes("c·∫£m ∆°n")) {
    return "Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n.";
  }
  
  if (lowerMessage.includes("t·∫°m bi·ªát") || lowerMessage.includes("bye")) {
    return "T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n sau nh√©!";
  }
  
  return "T√¥i hi·ªÉu b·∫°n ƒëang n√≥i g√¨, nh∆∞ng hi·ªán t·∫°i t√¥i g·∫∑p m·ªôt ch√∫t s·ª± c·ªë k·ªπ thu·∫≠t. H√£y th·ª≠ l·∫°i sau nh√©!";
}